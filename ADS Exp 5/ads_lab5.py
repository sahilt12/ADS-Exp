# -*- coding: utf-8 -*-
"""ads_lab5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11XSnHNSLPaaJlQyiDCHrF-BSLACSZqT6
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from imblearn.over_sampling import SMOTE, BorderlineSMOTE
from imblearn.combine import SMOTEENN

# Load the Credit Card Fraud Detection dataset from Kaggle
credit_card_data = pd.read_csv("fraud_detection.csv")

# Assume the target variable is named 'Class'
X = credit_card_data.drop('Class', axis=1)
y = credit_card_data['Class']

# Drop rows with missing target values
missing_indices = y.isnull()
X = X[~missing_indices]
y = y.dropna()

# Print imbalanced class distribution after handling missing values
print("\nImbalanced Class Distribution after handling missing values:")
print(y.value_counts())

# Split the imbalanced dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Dictionary to store results for different oversampling techniques
results = {}

# SMOTE
smote = SMOTE(random_state=42)
X_resampled_smote, y_resampled_smote = smote.fit_resample(X_train, y_train)
results['SMOTE'] = (X_resampled_smote, y_resampled_smote)

# Borderline-SMOTE
borderline_smote = BorderlineSMOTE(random_state=42)
X_resampled_borderline, y_resampled_borderline = borderline_smote.fit_resample(X_train, y_train)
results['Borderline-SMOTE'] = (X_resampled_borderline, y_resampled_borderline)

# SMOTE-ENN
smote_enn = SMOTEENN(random_state=42)
X_resampled_smoteenn, y_resampled_smoteenn = smote_enn.fit_resample(X_train, y_train)
results['SMOTE-ENN'] = (X_resampled_smoteenn, y_resampled_smoteenn)

# Train and evaluate a machine learning model for each resampled dataset
for technique, (X_resampled, y_resampled) in results.items():
    print(f"\nResults for {technique}:")

    # Train a RandomForestClassifier on the resampled data
    clf = RandomForestClassifier(random_state=42)
    clf.fit(X_resampled, y_resampled)

    # Evaluate the model on the original test set
    y_pred = clf.predict(X_test)
    print("Classification Report on Test Set:")
    print(classification_report(y_test, y_pred))